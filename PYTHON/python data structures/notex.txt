for implementing the stack using linkedlist we insert and remove from the head.

for implementing the queue using linkedlist we insert at the tail and remove from the head.

Both of the above implementations takes only O(1) time.

double ended queue supports adding and removing from both the ends.

Tree terminology:

1. Root
In a tree data structure, the first node is called as Root Node. Every tree must have a root node. 
We can say that the root node is the origin of the tree data structure. In any tree, there must be only one root node. 
We never have multiple root nodes in a tree.

2. Edge
In a tree data structure, the connecting link between any two nodes is called as EDGE. 
In a tree with 'N' number of nodes there will be a maximum of 'N-1' number of edges.

3. Parent
In a tree data structure, the node which is a predecessor of any node is called as PARENT NODE. 
In simple words, the node which has a branch from it to any other node is called a parent node.
 Parent node can also be defined as "The node which has child / children".

 4. Child
In a tree data structure, the node which is descendant of any node is called as CHILD Node.
 In simple words, the node which has a link from its parent node is called as child node. 
In a tree, any parent node can have any number of child nodes. In a tree, all the nodes except root are child nodes.

5. Siblings
In a tree data structure, nodes which belong to same Parent are called as SIBLINGS. 
In simple words, the nodes with the same parent are called Sibling nodes.

6. Leaf
In a tree data structure, the node which does not have a child is called as LEAF Node. In simple words, a leaf is a node with no child.

In a tree data structure, the leaf nodes are also called as External Nodes.
 External node is also a node with no child. In a tree, leaf node is also called as 'Terminal' node.

 7. Internal Nodes
 In a tree data structure, the node which has atleast one child is called as INTERNAL Node. In simple words, an internal node is a node with atleast one child.
 
 In a tree data structure, nodes other than leaf nodes are called as Internal Nodes. The root node is also said to be Internal Node if the tree has more than one node. 
 Internal nodes are also called as 'Non-Terminal' nodes.

 8. Degree
In a tree data structure, the total number of children of a node is called as DEGREE of that Node. In simple words, the Degree of a node is total number of children it has. The highest degree of a node among all the nodes in a tree is called as 'Degree of Tree'

Root-> Root is a special node in a tree. The entire tree is referenced through it. It does not have a parent.
Parent Node-> Parent node is an immediate predecessor of a node.
Child Node-> All immediate successors of a node are its children.
Siblings-> Nodes with the same parent are called Siblings.
Leaf-> Last node in the tree. There is no node after this node.
Edge-> Edge is a connection between one node to another. It is a line between two nodes or a node and a leaf.
Path-> Path is a number of successive edges from source node to destination node.


Tree can be termed as a RECURSIVE data structure.
In a valid tree for N Nodes we have N-1 Edges/Links
Depth of Node-> Depth of a node represents the number of edges from the tree's root node to the node.
Height of Node-> Height of a node is the number of edges on the longest path between that node & a leaf.
Height of Tree-> Height of tree represents the height of its root node.

Path - a sequence of nodes and edges connecting a node with a descendant.
When we talk about a path, it includes all nodes and all edges along the path, not just edges.
The direction of a path is strictly from top to bottom and cannot be changed in middle. In the diagram, we can't really talk about a path from B to F although B is above F. Also there will be no path starting from a leaf or from a child node to a parent node. ([1])

Height of node - The height of a node is the number of edges on the longest downward path between that node and a leaf.
Every node has height. So B can have height, so does A, C and D.
Leaf cannot have height as there will be no path starting from a leaf.

Height of tree -The height of a tree is the number of edges on the longest downward path between the root and a leaf.

So the height of a tree is the height of its root.

Frequently, we may be asked the question: what is the max number of nodes a tree can have if the height of the tree is h?. Of course the answer is 2h−1 . When h=1 , the number of node inside is 1, which is just the root; also when a tree has just root, the height of the root is 1. Hence, the two inductions match.

How about giving a height of 0? Then it means we don't have any node in the tree; but still we may have leaf inside (note that in this case we may not call it root of the tree as it makes not much sense). This is why in most languages, the type of a tree can be a leaf alone.


Depth –The depth of a node is the number of edges from the node to the tree's root node.

We don't care about path any more when depth pops in. We just count how many edges between the targeting node and the root, ignoring directions. For example, D's depth is 2.

Recall that when talking about height, we actually imply a baseline located at bottom. For depath, the baseline is at top which is root level. That's why we call it depth.

Note that the depth of the root is 0.

Level – The level of a node is defined by 1 + the number of connections between the node and the root.

Simply, level is depth plus 1.

The important thing to remember is when talking about level, it starts from 1 and the level of the root is 1. We need to be careful about this when solving problems related to level.


